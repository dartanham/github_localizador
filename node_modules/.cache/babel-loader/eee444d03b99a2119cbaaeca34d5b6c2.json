{"ast":null,"code":"var _jsxFileName = \"/home/dartanham/Documentos/github-interface-app/src/providers/GithubProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useCallback, useState } from 'react';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GithubContext = /*#__PURE__*/createContext({\n  loading: false,\n  user: {},\n  repositories: [],\n  starred: []\n});\n\nconst GithubProvider = ({\n  children\n}) => {\n  _s();\n\n  const [githubState, setGithubState] = useState({\n    hasUser: false,\n    isValidUser: true,\n    loading: false,\n    user: {\n      id: undefined,\n      avatar: undefined,\n      login: undefined,\n      name: undefined,\n      htmlUrl: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      publicGists: 0,\n      publicRepos: 0\n    },\n    repositories: [],\n    starred: []\n  });\n\n  const getUser = username => {\n    if (!username) {\n      setGithubState(prevState => ({ ...prevState,\n        hasUser: false,\n        isValidUser: true\n      }));\n      return;\n    }\n\n    setGithubState(prevState => ({ ...prevState,\n      loading: !prevState.loading\n    }));\n    api.get(`users/${username}`).then(({\n      data\n    }) => {\n      setGithubState(prevState => ({ ...prevState,\n        hasUser: true,\n        user: {\n          id: data.id,\n          avatar: data.avatar_url,\n          login: data.login,\n          name: data.name,\n          htmlUrl: data.html_url,\n          blog: data.blog,\n          company: data.company,\n          location: data.location,\n          followers: data.followers,\n          following: data.following,\n          publicGists: data.public_gists,\n          publicRepos: data.public_repos\n        }\n      }));\n    }).catch(() => {\n      setGithubState(prevState => ({ ...prevState,\n        isValidUser: false\n      }));\n    }).finally(() => {\n      setGithubState(prevState => ({ ...prevState,\n        loading: !prevState.loading\n      }));\n    });\n  };\n\n  const getUserRepos = username => {\n    api.get(`users/${username}/repos`).then(({\n      data\n    }) => {\n      setGithubState(prevState => ({ ...prevState,\n        repositories: data\n      }));\n    });\n  };\n\n  const getUserStarred = username => {\n    api.get(`users/${username}/starred`).then(({\n      data\n    }) => {\n      setGithubState(prevState => ({ ...prevState,\n        starred: data\n      }));\n    });\n  };\n\n  const contextValue = {\n    githubState,\n    getUser: useCallback(username => getUser(username), []),\n    getUserRepos: useCallback(username => getUserRepos(username), []),\n    getUserStarred: useCallback(username => getUserStarred(username), [])\n  };\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GithubProvider, \"zjn6Fu7rn+p+es7kQLlp5xNleNg=\");\n\n_c = GithubProvider;\nexport default GithubProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProvider\");","map":{"version":3,"sources":["/home/dartanham/Documentos/github-interface-app/src/providers/GithubProvider.jsx"],"names":["React","createContext","useCallback","useState","api","GithubContext","loading","user","repositories","starred","GithubProvider","children","githubState","setGithubState","hasUser","isValidUser","id","undefined","avatar","login","name","htmlUrl","blog","company","location","followers","following","publicGists","publicRepos","getUser","username","prevState","get","then","data","avatar_url","html_url","public_gists","public_repos","catch","finally","getUserRepos","getUserStarred","contextValue"],"mappings":"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","sourcesContent":["import React, { createContext, useCallback, useState } from 'react';\nimport api from '../services/api';\n\nexport const GithubContext = createContext({\n    loading: false,\n    user: {},\n    repositories: [],\n    starred: []\n});\n\nconst GithubProvider = ({ children }) => {\n    const [githubState, setGithubState] = useState({\n        hasUser: false,\n        isValidUser: true,\n        loading: false,\n        user: {\n            id: undefined,\n            avatar: undefined,\n            login: undefined,\n            name: undefined,\n            htmlUrl: undefined,\n            blog: undefined,\n            company: undefined,\n            location: undefined,\n            followers: 0,\n            following: 0,\n            publicGists: 0,\n            publicRepos: 0\n        },\n        repositories:[],\n        starred: []\n    });\n\n    const getUser = (username) => {\n        if (!username) {\n            setGithubState(prevState => ({\n                ...prevState,\n                hasUser: false,\n                isValidUser: true\n            }));\n            return;\n        }\n\n        setGithubState((prevState) => ({\n            ...prevState,\n            loading: !prevState.loading\n        }));\n\n        api.get(`users/${username}`)\n            .then(({ data }) => {\n            setGithubState(prevState => ({\n                ...prevState,\n                hasUser: true,\n                user: {\n                    id: data.id,\n                    avatar: data.avatar_url,\n                    login: data.login,\n                    name: data.name,\n                    htmlUrl: data.html_url,\n                    blog: data.blog,\n                    company: data.company,\n                    location: data.location,\n                    followers: data.followers,\n                    following: data.following,\n                    publicGists: data.public_gists,\n                    publicRepos: data.public_repos\n                }\n            }));\n        })\n        .catch(() => {\n            setGithubState(prevState => ({ ...prevState, isValidUser: false }));\n        })\n        .finally(() => {\n            setGithubState((prevState) => ({\n                ...prevState,\n                loading: !prevState.loading\n            }));\n        });\n    };\n\n    const getUserRepos = (username) => {\n        api.get(`users/${username}/repos`)\n            .then(({ data }) => {\n                setGithubState(prevState => ({\n                    ...prevState,\n                    repositories: data\n                }));\n            });\n    };\n    \n    const getUserStarred = (username) => {\n        api.get(`users/${username}/starred`)\n            .then(({ data }) => {\n                setGithubState(prevState => ({\n                    ...prevState,\n                    starred: data\n                }));\n            });\n    };\n\n    const contextValue = {\n        githubState,\n        getUser: useCallback((username) => getUser(username), []),\n        getUserRepos: useCallback((username) => getUserRepos(username), []),\n        getUserStarred: useCallback((username) => getUserStarred(username), [])\n    };\n\n    return (\n        <GithubContext.Provider value={contextValue}>\n            {children}\n        </GithubContext.Provider>\n    );\n};\n\nexport default GithubProvider;"]},"metadata":{},"sourceType":"module"}